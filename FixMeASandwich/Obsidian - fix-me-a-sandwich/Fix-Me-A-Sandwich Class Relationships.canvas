{
	"nodes":[
		{"id":"9c88a12a504b6219","type":"group","x":-3960,"y":-2280,"width":4360,"height":2655,"label":"Class Structure"},
		{"id":"44ab51eef6d32e11","type":"text","text":"Sandwich Class\nString breadType;\nint size;\nList<Topping> toppings\nboolean isToasted;\n\n// constructor\nSandwich(String breadType, int size, boolean isToasted){\nthis.breadType = breadType;  \nthis.size = size;  \nthis.isToasted = isToasted;\n}\n\nSandwich(){}\n// getters & setters\nString getBreadType()\nList<Topping> getToppings()\nvoid setToppings(List<Topping> toppings)\nboolean isToasted()\nvoid setToasted(boolean toasted)\nint getSize()\n\n\n// each sandwich can have a different type of bread\n// each sandwich can be a different size\n// each sandwich can have different toppings\n// each sandwich can have different sauces\n\n// each can sandwich can be/not be toasted","x":-1633,"y":-1360,"width":553,"height":721},
		{"id":"15ecec2b10dc4d2c","type":"text","text":"Topping:\nString name;\nboolean addExtra;\nboolean isPremium;\nboolean isMeat;\n\n// constructor\ndouble getPrice(int sandwichSize)\n\ndouble getMeatPrice(int sandwichSize)\ndouble getCheesePrice(int sandwichSize)\n\nString display(int size)\n\n// toppings can be either regular or premium\n// premium is split between meat and cheese\n// extra topping is an add-on price (premium only)\n\n\n","x":-1320,"y":-2040,"width":480,"height":521},
		{"id":"70e9d08e6f348b86","x":-1758,"y":-1799,"width":250,"height":280,"type":"text","text":"<<Interface>>\nCustomizable\n<List>Topping getDefaultToppings();\n\nList<Topping> toppingsToDefault();\n\nList<Topping>getCurrentToppings();"},
		{"id":"fca6da662048cad7","x":-2534,"y":-1280,"width":499,"height":524,"type":"text","text":"<<abstract>>\nSignatureSandwich extends Sandwich\nprotected final List<Topping> originalToppings\n\npublic SignatureSandwich(String breadType, int size, boolean isToasted) {  \n    super(breadType, size, isToasted);  \n    getOriginalToppings();  \n}"},
		{"id":"77f35d88d36c440a","x":-3100,"y":-2079,"width":430,"height":471,"type":"text","text":"BLT extends SignatureSandwich\nfinal String sandwichName = \"BLT\";\nList <Topping> signatureToppings = new ArrayList<>()\nSandwich BLT;\n\npublic BLT() {  \n    super(\"White\", 8, true);  \n    this.signatureToppings = getSignatureToppings();  \n}\n\nString getSandwichName()\nList<Topping> getSignatureToppings()\n\nsetSignatureToppings(List<Topping> signatureToppings)"},
		{"id":"584a018c44afedfb","x":-3680,"y":-1688,"width":425,"height":656,"type":"text","text":"Cuban extends SignatureSandwich\nfinal String sandwichName = \"Cuban\";\nList <Topping> signatureToppings = new ArrayList<>();  \nSandwich Cuban;\n\npublic Cuban() {  \n    super(\"Cuban Bread\", 8, true);  \n    this.signatureToppings = getSignatureToppings();  \n}\n\nList<Topping> getSignatureToppings()\n\nsetSignatureToppings(List<Topping> signatureToppings)"},
		{"id":"65f3bb08516cfa17","x":-3723,"y":-884,"width":512,"height":646,"type":"text","text":"PhillyCheeseSteak extends SignatureSandwich\n final String sandwichName = \"Philly Cheese Steak\";  \n List <Topping> signatureToppings = new ArrayList<>();  \n Sandwich CheeseSteak;\n\n\npublic PhillyCheeseSteak() {  \n    super(\"White\", 8, true);  \n    this.signatureToppings = getSignatureToppings();  \n}\n\nList<Topping> getSignatureToppings()\n\nsetSignatureToppings(List<Topping> signatureToppings)"},
		{"id":"69c2e832f76b3eb6","x":-3040,"y":-560,"width":540,"height":542,"type":"text","text":"TheDiamond extends SignatureSandwich\n final String sandwichName = \"The Diamond\";  \n List <Topping> signatureToppings = new ArrayList<>();  \n Sandwich TheDiamond;\n\npublic TheDiamond() {  \n    super(\"French Baguette\", 12, true);  \n    this.signatureToppings = getSignatureToppings();  \n}\n\nList<Topping> getSignatureToppings()\n\nsetSignatureToppings(List<Topping> signatureToppings)"},
		{"id":"ab4f43edcba72e1f","type":"text","text":"<<Interface>>\nOrderItem\n\ndouble orderItemPrice()\nString orderItemDescription()","x":-1576,"y":-480,"width":440,"height":242},
		{"id":"b3d98b50190125e5","type":"text","text":"Chips implements OrderItem {  \n     String chipsFlavor;  \n     final double chipsPrice = 1.50;\n\n// getters and setters","x":-1557,"y":-77,"width":402,"height":318},
		{"id":"17f398c475aea923","type":"text","text":"Ordermanager\n// saves a customer name\n// saves their order\n// records price\n// written to file\n\n\nprivate static final String dir = \"ReceiptsFolder/\";  \n  \npublic void saveReceipt(Order customerOrder)\n\npublic static String createFileName()","x":-160,"y":-638,"width":360,"height":526},
		{"id":"915bbba2bf8f7f81","type":"text","text":" Order Class\n final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");  \n final LocalDateTime timeOfOrder = LocalDateTime.now();  \n final List<OrderItem> orderItems = new ArrayList<>();  \npublic String customer;  \n  \n  \npublic Order(){  \n    \n}\n// determine how to fit each orderItem into the Order\n\n\n// constructor\n// getters & setters\n\n\n// orderItem interface\n// all order items can be added to this interface\n(sandwich, chips, drink)\n// each item has a price and a description\n// loop through orderItems to get prices and creating an order\n\nvoid showCompleteOrder()\ndouble getOrderCost(List<OrderItem> list)","x":-880,"y":-680,"width":540,"height":643},
		{"id":"b1ddb39b26731148","type":"text","text":"Drink implements OrderItem {  \n    private String drinkFlavor;  \n    private final String drinkSize;  \n  \npublic Drink(String drinkFlavor, String drinkSize) {  \n        this.drinkFlavor = drinkFlavor;  \n        this.drinkSize = drinkSize;  \n    }\n// getters and setters","x":-2284,"y":-571,"width":415,"height":425},
		{"id":"e02fbd3a0aa465b3","type":"text","text":"--> Original Template for structure of Code from workbook <--\n\nUIScreen\n\nshowHomeScreen: \n\t1. New Order\n\t2. Exit - exit application\n- showOrderScreen\n\t1. Add Sandwich\n\t2. Add Drink\n\t3. Add Chips\n\t4. Checkout\n\t5. Cancel Order - delete order and go back to home screen\n- processAddSandwich:\n\t// Customize your sandwich!\n\t// think of including a menu of toppings to choose from (refactor to look aesthetic once project completion)\n\t- Choice of Bread: white, wheat, rye, or wrap\n\t- Sandwich Size:  4\" + 8\" + 12\" (inches)\n\t- Choice of Toppings: \n\t\t- (premium) Meat: Regular/Extra\n\t\t- (premium) Cheese: Regular/Extra\n\t\t- Other Toppings: Regular/Extra\n\t\t- Sauces: Regular/Extra\n\t- Do you want your sandwich toasted? Y/N\n- processAddDrink:\n\t// choose your drink flavor\n\t// choose your drink size\n\t- Coke Cherry\n\t- Dr. Pepper\n\t- Fanta (Orange)\n\t- Ginger Ale (Canada Dry)\n\n\t- Small\n\t- Medium\n\t- Large\n- processAddChips:\n\t// choose type of chip\n\t- Barbecue \"It depends on the brand whether I like barbecue\"\n\t- Cheddar Cheese & Onion \"This tends to be my go-to flavor\"\n\t- Hot Chips \"This is my ultimate flavor of chip choice\"\n\t- Salt & Vinegar \"EEEWWWW YOU EAT THAT!?? Okay, if you say so.\"\n- processCheckOut:\n\t// display the order details and price\n\t- Confirm Order: save receipt file and go back to home scree\n\t- Cancel Order: delete order and go back to home screen","x":640,"y":-1400,"width":999,"height":1240,"color":"4"},
		{"id":"e9e4e1e7ec3dd510","type":"text","text":"**USER INTERFACE**\nConsole Class\nOrderScreen\nFixMeABasicSandwich\nFixMeAPremiumSandwich\n\n**INTERFACES**\nCustomizable\nOrderItem\n\n**FILE MANAGER**\nOrderManager\n\n\n=**MENU**=\n**ORIGINAL**\nChips\nDrink\nOrder\nSandwich\nTopping\n\n**SIGNATURE SANDWICHES**\nBLT\nCuban\nPhillyCheeseSteak\nTheDiamond\nSignatureSandwich (abstract)\n\n","x":1800,"y":-1260,"width":250,"height":843}
	],
	"edges":[
		{"id":"795217244fc19647","fromNode":"44ab51eef6d32e11","fromSide":"top","toNode":"15ecec2b10dc4d2c","toSide":"bottom","label":"Has a relationship"},
		{"id":"8842989abb6f255a","fromNode":"915bbba2bf8f7f81","fromSide":"left","toNode":"ab4f43edcba72e1f","toSide":"right","label":"Has multiple"},
		{"id":"eba2d1d76fd4ece5","fromNode":"44ab51eef6d32e11","fromSide":"bottom","toNode":"ab4f43edcba72e1f","toSide":"top","label":"Is a relationship"},
		{"id":"cebc4c0e39529d00","fromNode":"b1ddb39b26731148","fromSide":"right","toNode":"ab4f43edcba72e1f","toSide":"left","label":"Is a relationship"},
		{"id":"b92625ae6fe381c1","fromNode":"b3d98b50190125e5","fromSide":"top","toNode":"ab4f43edcba72e1f","toSide":"bottom","label":"Is a relationship"},
		{"id":"d8ea0bb8d9f0c9f7","fromNode":"915bbba2bf8f7f81","fromSide":"right","toNode":"17f398c475aea923","toSide":"left","label":"Has a relationship"},
		{"id":"fb79982fb164af51","fromNode":"77f35d88d36c440a","fromSide":"bottom","toNode":"fca6da662048cad7","toSide":"left"},
		{"id":"97785dd64559c3a5","fromNode":"584a018c44afedfb","fromSide":"right","toNode":"fca6da662048cad7","toSide":"left"},
		{"id":"be370ca0a453854e","fromNode":"65f3bb08516cfa17","fromSide":"right","toNode":"fca6da662048cad7","toSide":"left"},
		{"id":"a6c4bfd6a634bcfd","fromNode":"69c2e832f76b3eb6","fromSide":"top","toNode":"fca6da662048cad7","toSide":"left","label":"Is a Relationship (4)"},
		{"id":"d4585a5e0072c140","fromNode":"70e9d08e6f348b86","fromSide":"bottom","toNode":"44ab51eef6d32e11","toSide":"top","toEnd":"none","label":"Is a Relationship"},
		{"id":"78ecb9eb7911fb5d","fromNode":"fca6da662048cad7","fromSide":"right","toNode":"44ab51eef6d32e11","toSide":"left","label":"Is a Relationship"}
	]
}